{"ast":null,"code":"import _classCallCheck from\"/Users/faithtejada/Desktop/apps/appMontessori/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/faithtejada/Desktop/apps/appMontessori/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/faithtejada/Desktop/apps/appMontessori/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/faithtejada/Desktop/apps/appMontessori/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import\"./App.css\";import{connect}from\"react-redux\";import Home from\"./components/home\";import Account from\"./components/account\";import Timeline from\"./components/timeline\";import Profile from\"./components/profile\";import TimelineInfo from\"./components/timelineInfo\";import GlossaryButtons from\"./components/glossaryButtons\";import Glossary from\"./components/glossary\";import NoLoginInfo from\"./components/noLoginInfo\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(){_classCallCheck(this,App);return _super.apply(this,arguments);}_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){// detect if user has come from whatsapp, if so, automatically send them to the timeline\n// console.log(\"this if statement ran\", window.location.href);\nvar url=window.location.href;// the below says if .upto is in the url, it means go to the timeline screen\n// that way a user doesn't have to log in - the -1 means it doesn't exist/can't\n// find .upto in the url\nif(url.search(\".upto\")!==-1){console.log(\"this worked\");this.props.dispatch({type:\"SET_SCREEN_MODE\",screenMode:2});}}},{key:\"render\",value:function render(){// const live = window.location.pathname;\n// if (live !== \"/beaches\") {\n//   return (\n//     <div>\n//       <h1>Sorry this site is not yet live!</h1>\n//     </div>\n//   );\n// }\n// the live site contains the pathname /beaches so while I am\n// debugging my site etc, I do not want others to see it deployed\n// so if I want to see my live deployed site I have to add /beaches\n// to the url\n// delete or comment out when ready to go live\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[this.props.screenMode===0&&/*#__PURE__*/_jsx(Home,{}),this.props.screenMode===1&&/*#__PURE__*/_jsx(Account,{}),this.props.screenMode===2&&/*#__PURE__*/_jsx(Timeline,{}),this.props.screenMode===3&&/*#__PURE__*/_jsx(Profile,{}),this.props.screenMode===4&&/*#__PURE__*/_jsx(TimelineInfo,{}),this.props.screenMode===5&&/*#__PURE__*/_jsx(GlossaryButtons,{}),this.props.screenMode===6&&/*#__PURE__*/_jsx(Glossary,{}),this.props.screenMode===7&&/*#__PURE__*/_jsx(NoLoginInfo,{})]});}}]);return App;}(Component);function mapStateToProps(state){return{screenMode:state.screenMode// this is where what I want from the store\n//  will go\n};}export default connect(mapStateToProps)(App);// this says, here is my component and here is what part\n// of the store I require","map":{"version":3,"sources":["/Users/faithtejada/Desktop/apps/appMontessori/frontend/src/App.js"],"names":["React","Component","connect","Home","Account","Timeline","Profile","TimelineInfo","GlossaryButtons","Glossary","NoLoginInfo","App","url","window","location","href","search","console","log","props","dispatch","type","screenMode","mapStateToProps","state"],"mappings":"oqBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAO,WAAP,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,MAAOC,CAAAA,IAAP,KAAiB,mBAAjB,CACA,MAAOC,CAAAA,OAAP,KAAoB,sBAApB,CACA,MAAOC,CAAAA,QAAP,KAAqB,uBAArB,CACA,MAAOC,CAAAA,OAAP,KAAoB,sBAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,2BAAzB,CACA,MAAOC,CAAAA,eAAP,KAA4B,8BAA5B,CACA,MAAOC,CAAAA,QAAP,KAAqB,uBAArB,CACA,MAAOC,CAAAA,WAAP,KAAwB,0BAAxB,C,gJAEMC,CAAAA,G,yNACJ,4BAAoB,CAClB;AACA;AACA,GAAIC,CAAAA,GAAG,CAAGC,MAAM,CAACC,QAAP,CAAgBC,IAA1B,CAEA;AACA;AACA;AACA,GAAIH,GAAG,CAACI,MAAJ,CAAW,OAAX,IAAwB,CAAC,CAA7B,CAAgC,CAC9BC,OAAO,CAACC,GAAR,CAAY,aAAZ,EACA,KAAKC,KAAL,CAAWC,QAAX,CAAoB,CAClBC,IAAI,CAAE,iBADY,CAElBC,UAAU,CAAE,CAFM,CAApB,EAID,CACF,C,sBAED,iBAAS,CACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBACE,2BACG,KAAKH,KAAL,CAAWG,UAAX,GAA0B,CAA1B,eAA+B,KAAC,IAAD,IADlC,CAGG,KAAKH,KAAL,CAAWG,UAAX,GAA0B,CAA1B,eAA+B,KAAC,OAAD,IAHlC,CAIG,KAAKH,KAAL,CAAWG,UAAX,GAA0B,CAA1B,eAA+B,KAAC,QAAD,IAJlC,CAKG,KAAKH,KAAL,CAAWG,UAAX,GAA0B,CAA1B,eAA+B,KAAC,OAAD,IALlC,CAMG,KAAKH,KAAL,CAAWG,UAAX,GAA0B,CAA1B,eAA+B,KAAC,YAAD,IANlC,CAOG,KAAKH,KAAL,CAAWG,UAAX,GAA0B,CAA1B,eAA+B,KAAC,eAAD,IAPlC,CAQG,KAAKH,KAAL,CAAWG,UAAX,GAA0B,CAA1B,eAA+B,KAAC,QAAD,IARlC,CASG,KAAKH,KAAL,CAAWG,UAAX,GAA0B,CAA1B,eAA+B,KAAC,WAAD,IATlC,GADF,CAeD,C,iBA/CerB,S,EAkDlB,QAASsB,CAAAA,eAAT,CAAyBC,KAAzB,CAAgC,CAC9B,MAAO,CACLF,UAAU,CAAEE,KAAK,CAACF,UAClB;AACA;AAHK,CAAP,CAKD,CACD,cAAepB,CAAAA,OAAO,CAACqB,eAAD,CAAP,CAAyBZ,GAAzB,CAAf,CACA;AACA","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { connect } from \"react-redux\";\nimport Home from \"./components/home\";\nimport Account from \"./components/account\";\nimport Timeline from \"./components/timeline\";\nimport Profile from \"./components/profile\";\nimport TimelineInfo from \"./components/timelineInfo\";\nimport GlossaryButtons from \"./components/glossaryButtons\";\nimport Glossary from \"./components/glossary\";\nimport NoLoginInfo from \"./components/noLoginInfo\";\n\nclass App extends Component {\n  componentDidMount() {\n    // detect if user has come from whatsapp, if so, automatically send them to the timeline\n    // console.log(\"this if statement ran\", window.location.href);\n    var url = window.location.href;\n\n    // the below says if .upto is in the url, it means go to the timeline screen\n    // that way a user doesn't have to log in - the -1 means it doesn't exist/can't\n    // find .upto in the url\n    if (url.search(\".upto\") !== -1) {\n      console.log(\"this worked\");\n      this.props.dispatch({\n        type: \"SET_SCREEN_MODE\",\n        screenMode: 2,\n      });\n    }\n  }\n\n  render() {\n    // const live = window.location.pathname;\n    // if (live !== \"/beaches\") {\n    //   return (\n    //     <div>\n    //       <h1>Sorry this site is not yet live!</h1>\n    //     </div>\n    //   );\n    // }\n    // the live site contains the pathname /beaches so while I am\n    // debugging my site etc, I do not want others to see it deployed\n    // so if I want to see my live deployed site I have to add /beaches\n    // to the url\n    // delete or comment out when ready to go live\n    return (\n      <>\n        {this.props.screenMode === 0 && <Home />}\n        {/* if mode is 0 show home component */}\n        {this.props.screenMode === 1 && <Account />}\n        {this.props.screenMode === 2 && <Timeline />}\n        {this.props.screenMode === 3 && <Profile />}\n        {this.props.screenMode === 4 && <TimelineInfo />}\n        {this.props.screenMode === 5 && <GlossaryButtons />}\n        {this.props.screenMode === 6 && <Glossary />}\n        {this.props.screenMode === 7 && <NoLoginInfo />}\n        {/* this is sending a msg to the store asking for \n                  what I want via type */}\n      </>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    screenMode: state.screenMode,\n    // this is where what I want from the store\n    //  will go\n  };\n}\nexport default connect(mapStateToProps)(App);\n// this says, here is my component and here is what part\n// of the store I require\n"]},"metadata":{},"sourceType":"module"}