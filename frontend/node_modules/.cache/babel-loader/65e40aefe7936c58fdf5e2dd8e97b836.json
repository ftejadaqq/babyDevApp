{"ast":null,"code":"var _jsxFileName = \"/Users/faithtejada/Desktop/apps/appMontessori/frontend/src/components/passwordReset.jsx\";\nimport React, { Component } from \"react\";\nimport \"../styles/passwordReset.css\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport PasswordResetPopup from \"./passwordResetPopup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass PasswordReset extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onUserInput = e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      }, () => console.log(this.state));\n    };\n\n    this.onResetPassword = async () => {\n      const result = await axios.post( // when we deploy the app needs to point to this the correct liveUrl in index.js\n      `${this.props.liveUrl}/password_reset`, {\n        email: this.state.email\n      });\n\n      if (result.data.password_reset === true) {\n        this.props.dispatch({\n          type: \"SET_PASSWORD_RESET_POPUP_ACTIVE\"\n        });\n      }\n\n      console.log(result);\n    };\n  }\n\n  render() {\n    console.log(this.props.liveUrl);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.props.passwordResetPopupActive === true && /*#__PURE__*/_jsxDEV(PasswordResetPopup, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 58\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onChange: this.onUserInput,\n        className: \"password-reset-page\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Find Your Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please enter your email address to reset your password.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.onResetPassword,\n          children: \"Reset password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.props.dispatch({\n              type: \"SET_ACCOUNT_MODE\",\n              accountMode: 0\n            });\n            this.props.dispatch({\n              type: \"SET_SCREEN_MODE\",\n              screenMode: 1\n            });\n          },\n          children: \"Return to login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    liveUrl: state.liveUrl,\n    passwordResetPopupActive: state.passwordResetPopupActive // this is where what I want from the store\n    // will go\n\n  };\n}\n\nexport default connect(mapStateToProps)(PasswordReset); // this says, here is my component and here is what part\n// of the store I require","map":{"version":3,"sources":["/Users/faithtejada/Desktop/apps/appMontessori/frontend/src/components/passwordReset.jsx"],"names":["React","Component","connect","axios","PasswordResetPopup","PasswordReset","onUserInput","e","setState","target","id","value","console","log","state","onResetPassword","result","post","props","liveUrl","email","data","password_reset","dispatch","type","render","passwordResetPopupActive","accountMode","screenMode","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,6BAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;;;AAEA,MAAMC,aAAN,SAA4BJ,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SAEpCK,WAFoC,GAErBC,CAAD,IAAO;AACnB,WAAKC,QAAL,CAAc;AAAE,SAACD,CAAC,CAACE,MAAF,CAASC,EAAV,GAAeH,CAAC,CAACE,MAAF,CAASE;AAA1B,OAAd,EAAiD,MAC/CC,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB,CADF;AAGD,KANmC;;AAAA,SAQpCC,eARoC,GAQlB,YAAY;AAC5B,YAAMC,MAAM,GAAG,MAAMb,KAAK,CAACc,IAAN,EACnB;AACC,SAAE,KAAKC,KAAL,CAAWC,OAAQ,iBAFH,EAGnB;AACEC,QAAAA,KAAK,EAAE,KAAKN,KAAL,CAAWM;AADpB,OAHmB,CAArB;;AAQA,UAAIJ,MAAM,CAACK,IAAP,CAAYC,cAAZ,KAA+B,IAAnC,EAAyC;AACvC,aAAKJ,KAAL,CAAWK,QAAX,CAAoB;AAClBC,UAAAA,IAAI,EAAE;AADY,SAApB;AAGD;;AACDZ,MAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AACD,KAvBmC;AAAA;;AAyBpCS,EAAAA,MAAM,GAAG;AACPb,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKK,KAAL,CAAWC,OAAvB;AACA,wBACE;AAAA,iBAEG,KAAKD,KAAL,CAAWQ,wBAAX,KAAwC,IAAxC,iBAAgD,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,cAFnD,eAIE;AAAK,QAAA,QAAQ,EAAE,KAAKpB,WAApB;AAAiC,QAAA,SAAS,EAAC,qBAA3C;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,EAAE,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AAAQ,UAAA,OAAO,EAAE,KAAKS,eAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE;AACE,UAAA,OAAO,EAAE,MAAM;AACb,iBAAKG,KAAL,CAAWK,QAAX,CAAoB;AAClBC,cAAAA,IAAI,EAAE,kBADY;AAElBG,cAAAA,WAAW,EAAE;AAFK,aAApB;AAIA,iBAAKT,KAAL,CAAWK,QAAX,CAAoB;AAClBC,cAAAA,IAAI,EAAE,iBADY;AAElBI,cAAAA,UAAU,EAAE;AAFM,aAApB;AAID,WAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA,oBADF;AA2BD;;AAtDmC;;AAyDtC,SAASC,eAAT,CAAyBf,KAAzB,EAAgC;AAC9B,SAAO;AACLK,IAAAA,OAAO,EAAEL,KAAK,CAACK,OADV;AAELO,IAAAA,wBAAwB,EAAEZ,KAAK,CAACY,wBAF3B,CAGL;AACA;;AAJK,GAAP;AAMD;;AAED,eAAexB,OAAO,CAAC2B,eAAD,CAAP,CAAyBxB,aAAzB,CAAf,C,CACA;AACA","sourcesContent":["import React, { Component } from \"react\";\nimport \"../styles/passwordReset.css\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport PasswordResetPopup from \"./passwordResetPopup\";\n\nclass PasswordReset extends Component {\n  // dynamic user input\n  onUserInput = (e) => {\n    this.setState({ [e.target.id]: e.target.value }, () =>\n      console.log(this.state)\n    );\n  };\n\n  onResetPassword = async () => {\n    const result = await axios.post(\n      // when we deploy the app needs to point to this the correct liveUrl in index.js\n      `${this.props.liveUrl}/password_reset`,\n      {\n        email: this.state.email,\n      }\n    );\n\n    if (result.data.password_reset === true) {\n      this.props.dispatch({\n        type: \"SET_PASSWORD_RESET_POPUP_ACTIVE\",\n      });\n    }\n    console.log(result);\n  };\n\n  render() {\n    console.log(this.props.liveUrl);\n    return (\n      <>\n        {/* this pop up will cover the screen when active */}\n        {this.props.passwordResetPopupActive === true && <PasswordResetPopup />}\n\n        <div onChange={this.onUserInput} className=\"password-reset-page\">\n          <h1>Find Your Account</h1>\n          <p>Please enter your email address to reset your password.</p>\n          <input type=\"text\" id=\"email\"></input>\n          <button onClick={this.onResetPassword}>Reset password</button>\n          <button\n            onClick={() => {\n              this.props.dispatch({\n                type: \"SET_ACCOUNT_MODE\",\n                accountMode: 0,\n              });\n              this.props.dispatch({\n                type: \"SET_SCREEN_MODE\",\n                screenMode: 1,\n              });\n            }}\n          >\n            Return to login\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    liveUrl: state.liveUrl,\n    passwordResetPopupActive: state.passwordResetPopupActive,\n    // this is where what I want from the store\n    // will go\n  };\n}\n\nexport default connect(mapStateToProps)(PasswordReset);\n// this says, here is my component and here is what part\n// of the store I require\n"]},"metadata":{},"sourceType":"module"}