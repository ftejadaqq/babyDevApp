{"ast":null,"code":"var _jsxFileName = \"/Users/faithtejada/Desktop/apps/appMontessori/frontend/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport { connect } from \"react-redux\";\nimport Home from \"./components/home\";\nimport Account from \"./components/account\";\nimport Timeline from \"./components/timeline\";\nimport Profile from \"./components/profile\";\nimport TimelineInfo from \"./components/timelineInfo\";\nimport GlossaryButtons from \"./components/glossaryButtons\";\nimport Glossary from \"./components/glossary\";\nimport noLoginInfo from \"./components/noLoginInfo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  componentDidMount() {\n    // detect if user has come from whatsapp, if so, automatically send them to the timeline\n    // console.log(\"this if statement ran\", window.location.href);\n    var url = window.location.href; // the below says if .upto is in the url, it means go to the timeline screen\n    // that way a user doesn't have to log in - the -1 means it doesn't exist/can't\n    // find .upto in the url\n\n    if (url.search(\".upto\") !== -1) {\n      console.log(\"this worked\");\n      this.props.dispatch({\n        type: \"SET_SCREEN_MODE\",\n        screenMode: 2\n      });\n    }\n  }\n\n  render() {\n    // const live = window.location.pathname;\n    // if (live !== \"/beaches\") {\n    //   return (\n    //     <div>\n    //       <h1>Sorry this site is not yet live!</h1>\n    //     </div>\n    //   );\n    // }\n    // the live site contains the pathname /beaches so while I am\n    // debugging my site etc, I do not want others to see it deployed\n    // so if I want to see my live deployed site I have to add /beaches\n    // to the url\n    // delete or comment out when ready to go live\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.props.screenMode === 0 && /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 41\n      }, this), this.props.screenMode === 1 && /*#__PURE__*/_jsxDEV(Account, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 41\n      }, this), this.props.screenMode === 2 && /*#__PURE__*/_jsxDEV(Timeline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 41\n      }, this), this.props.screenMode === 3 && /*#__PURE__*/_jsxDEV(Profile, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 41\n      }, this), this.props.screenMode === 4 && /*#__PURE__*/_jsxDEV(TimelineInfo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 41\n      }, this), this.props.screenMode === 5 && /*#__PURE__*/_jsxDEV(GlossaryButtons, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 41\n      }, this), this.props.screenMode === 6 && /*#__PURE__*/_jsxDEV(Glossary, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 41\n      }, this), this.props.screenMode === 7 && /*#__PURE__*/_jsxDEV(NoLoginInfo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 41\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    screenMode: state.screenMode // this is where what I want from the store\n    //  will go\n\n  };\n}\n\nexport default connect(mapStateToProps)(App); // this says, here is my component and here is what part\n// of the store I require","map":{"version":3,"sources":["/Users/faithtejada/Desktop/apps/appMontessori/frontend/src/App.js"],"names":["React","Component","connect","Home","Account","Timeline","Profile","TimelineInfo","GlossaryButtons","Glossary","noLoginInfo","App","componentDidMount","url","window","location","href","search","console","log","props","dispatch","type","screenMode","render","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;;;;AAEA,MAAMC,GAAN,SAAkBV,SAAlB,CAA4B;AAC1BW,EAAAA,iBAAiB,GAAG;AAClB;AACA;AACA,QAAIC,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAA1B,CAHkB,CAKlB;AACA;AACA;;AACA,QAAIH,GAAG,CAACI,MAAJ,CAAW,OAAX,MAAwB,CAAC,CAA7B,EAAgC;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,WAAKC,KAAL,CAAWC,QAAX,CAAoB;AAClBC,QAAAA,IAAI,EAAE,iBADY;AAElBC,QAAAA,UAAU,EAAE;AAFM,OAApB;AAID;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBACE;AAAA,iBACG,KAAKJ,KAAL,CAAWG,UAAX,KAA0B,CAA1B,iBAA+B,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cADlC,EAGG,KAAKH,KAAL,CAAWG,UAAX,KAA0B,CAA1B,iBAA+B,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAHlC,EAIG,KAAKH,KAAL,CAAWG,UAAX,KAA0B,CAA1B,iBAA+B,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cAJlC,EAKG,KAAKH,KAAL,CAAWG,UAAX,KAA0B,CAA1B,iBAA+B,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cALlC,EAMG,KAAKH,KAAL,CAAWG,UAAX,KAA0B,CAA1B,iBAA+B,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cANlC,EAOG,KAAKH,KAAL,CAAWG,UAAX,KAA0B,CAA1B,iBAA+B,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,cAPlC,EAQG,KAAKH,KAAL,CAAWG,UAAX,KAA0B,CAA1B,iBAA+B,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cARlC,EASG,KAAKH,KAAL,CAAWG,UAAX,KAA0B,CAA1B,iBAA+B,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cATlC;AAAA,oBADF;AAeD;;AA/CyB;;AAkD5B,SAASE,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLH,IAAAA,UAAU,EAAEG,KAAK,CAACH,UADb,CAEL;AACA;;AAHK,GAAP;AAKD;;AACD,eAAerB,OAAO,CAACuB,eAAD,CAAP,CAAyBd,GAAzB,CAAf,C,CACA;AACA","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { connect } from \"react-redux\";\nimport Home from \"./components/home\";\nimport Account from \"./components/account\";\nimport Timeline from \"./components/timeline\";\nimport Profile from \"./components/profile\";\nimport TimelineInfo from \"./components/timelineInfo\";\nimport GlossaryButtons from \"./components/glossaryButtons\";\nimport Glossary from \"./components/glossary\";\nimport noLoginInfo from \"./components/noLoginInfo\";\n\nclass App extends Component {\n  componentDidMount() {\n    // detect if user has come from whatsapp, if so, automatically send them to the timeline\n    // console.log(\"this if statement ran\", window.location.href);\n    var url = window.location.href;\n\n    // the below says if .upto is in the url, it means go to the timeline screen\n    // that way a user doesn't have to log in - the -1 means it doesn't exist/can't\n    // find .upto in the url\n    if (url.search(\".upto\") !== -1) {\n      console.log(\"this worked\");\n      this.props.dispatch({\n        type: \"SET_SCREEN_MODE\",\n        screenMode: 2,\n      });\n    }\n  }\n\n  render() {\n    // const live = window.location.pathname;\n    // if (live !== \"/beaches\") {\n    //   return (\n    //     <div>\n    //       <h1>Sorry this site is not yet live!</h1>\n    //     </div>\n    //   );\n    // }\n    // the live site contains the pathname /beaches so while I am\n    // debugging my site etc, I do not want others to see it deployed\n    // so if I want to see my live deployed site I have to add /beaches\n    // to the url\n    // delete or comment out when ready to go live\n    return (\n      <>\n        {this.props.screenMode === 0 && <Home />}\n        {/* if mode is 0 show home component */}\n        {this.props.screenMode === 1 && <Account />}\n        {this.props.screenMode === 2 && <Timeline />}\n        {this.props.screenMode === 3 && <Profile />}\n        {this.props.screenMode === 4 && <TimelineInfo />}\n        {this.props.screenMode === 5 && <GlossaryButtons />}\n        {this.props.screenMode === 6 && <Glossary />}\n        {this.props.screenMode === 7 && <NoLoginInfo />}\n        {/* this is sending a msg to the store asking for \n                  what I want via type */}\n      </>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    screenMode: state.screenMode,\n    // this is where what I want from the store\n    //  will go\n  };\n}\nexport default connect(mapStateToProps)(App);\n// this says, here is my component and here is what part\n// of the store I require\n"]},"metadata":{},"sourceType":"module"}